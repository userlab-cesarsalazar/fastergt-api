service: Users-rapidito

plugins:
  - serverless-offline

provider:
  name: aws
  runtime: nodejs10.x
  stage: ${opt:stage, 'qa'}
  region: us-east-1
  environment:
    STAGE: ${self:provider.stage}
    DB_HOST: ${file(../../commons/credentials.json):${self:provider.stage}.dbHost}
    DB_PORT: ${file(../../commons/credentials.json):${self:provider.stage}.dbPort}
    DB_PASSWORD: ${file(../../commons/credentials.json):${self:provider.stage}.dbPassword}
    DB_USER: ${file(../../commons/credentials.json):${self:provider.stage}.dbUser}
    DB_NAME: ${file(../../commons/credentials.json):${self:provider.stage}.dbName}
    IDENTITY: ${file(../../commons/credentials.json):${self:provider.stage}.IdentityPoolId}
    USER_POOL: ${file(../../commons/credentials.json):${self:provider.stage}.userPool}
    ACCESS_KEY: ${file(../../commons/credentials.json):${self:provider.stage}.accessKeyId}
    SECRET_KEY: ${file(../../commons/credentials.json):${self:provider.stage}.secretAccessKey}

package:
  include:
    - ../../commons/**
  exclude:
    - node_modules/**


functions:
  usersGet:
    handler: handler.read
    timeout: 30
    events:
      - http:
          path: users
          method: get
          cors:
           origin: '*'
           allowCredentials: true
           headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
          authorizer:
            arn: ${file(../../commons/credentials.json):${self:provider.stage}.pool_arn}
    layers:
      - arn:aws:lambda:us-east-1:${file(../../commons/credentials.json):${self:provider.stage}.awsAccountId}:layer:rapidito_layer_v:${file(../../commons/credentials.json):${self:provider.stage}.layerVersion}

  usersCreate:
      handler: handler.create
      timeout: 30
      events:
      - http:
          path: users
          method: post
          cors:
           origin: '*'
           allowCredentials: true
           headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
           authorizer:
             arn: ${file(../../commons/credentials.json):${self:provider.stage}.pool_arn}
      layers:
        - arn:aws:lambda:us-east-1:${file(../../commons/credentials.json):${self:provider.stage}.awsAccountId}:layer:rapidito_layer_v:${file(../../commons/credentials.json):${self:provider.stage}.layerVersion}

  usersUpdate:
      handler: handler.update
      timeout: 30
      events:
      - http:
          path: users/{user_id}
          method: put
          cors:
           origin: '*'
           allowCredentials: true
           headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
           authorizer:
             arn: ${file(../../commons/credentials.json):${self:provider.stage}.pool_arn}
      layers:
        - arn:aws:lambda:us-east-1:${file(../../commons/credentials.json):${self:provider.stage}.awsAccountId}:layer:rapidito_layer_v:${file(../../commons/credentials.json):${self:provider.stage}.layerVersion}

  usersDelete:
      handler: handler.delete
      timeout: 30
      events:
      - http:
          path: users/{user_id}
          method: delete
          cors:
           origin: '*'
           allowCredentials: true
           headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
           authorizer:
             arn: ${file(../../commons/credentials.json):${self:provider.stage}.pool_arn}
      layers:
        - arn:aws:lambda:us-east-1:${file(../../commons/credentials.json):${self:provider.stage}.awsAccountId}:layer:rapidito_layer_v:${file(../../commons/credentials.json):${self:provider.stage}.layerVersion}


  usersDetail:
      handler: handler.detail
      timeout: 30
      events:
      - http:
          path: users/{user_id}
          method: get
          cors:
           origin: '*'
           allowCredentials: true
           headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
           authorizer:
             arn: ${file(../../commons/credentials.json):${self:provider.stage}.pool_arn}
      layers:
        - arn:aws:lambda:us-east-1:${file(../../commons/credentials.json):${self:provider.stage}.awsAccountId}:layer:rapidito_layer_v:${file(../../commons/credentials.json):${self:provider.stage}.layerVersion}

  usersPackages:
      handler: handler.getPackagesUser
      timeout: 30
      events:
      - http:
          path: users/{user_id}/packages
          method: get
          cors:
           origin: '*'
           allowCredentials: true
           headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
           authorizer:
             arn: ${file(../../commons/credentials.json):${self:provider.stage}.pool_arn}
      layers:
        - arn:aws:lambda:us-east-1:${file(../../commons/credentials.json):${self:provider.stage}.awsAccountId}:layer:rapidito_layer_v:${file(../../commons/credentials.json):${self:provider.stage}.layerVersion}


  usersProfile:
      handler: handler.profile
      timeout: 30
      events:
      - http:
          path: users/profile
          method: get
          cors:
           origin: '*'
           allowCredentials: true
           headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
          authorizer:
            arn: "arn:aws:cognito-idp:us-east-1:097890312429:userpool/us-east-1_V3Jt8F0yn"
      layers:
        - arn:aws:lambda:us-east-1:${file(../../commons/credentials.json):${self:provider.stage}.awsAccountId}:layer:rapidito_layer_v:${file(../../commons/credentials.json):${self:provider.stage}.layerVersion}

  usersSearch:
      handler: handler.search
      timeout: 30
      events:
      - http:
          path: search
          method: get
          cors:
           origin: '*'
           allowCredentials: true
           headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
          authorizer:
            arn: ${file(../../commons/credentials.json):${self:provider.stage}.pool_arn}
      layers:
        - arn:aws:lambda:us-east-1:${file(../../commons/credentials.json):${self:provider.stage}.awsAccountId}:layer:rapidito_layer_v:${file(../../commons/credentials.json):${self:provider.stage}.layerVersion}


  UsersMigration:
    handler: handler.migration
    layers:
      - arn:aws:lambda:us-east-1:${file(../../commons/credentials.json):${self:provider.stage}.awsAccountId}:layer:rapidito_layer_v:${file(../../commons/credentials.json):${self:provider.stage}.layerVersion}

  UserPostConfirmation:
    handler: handler.postConfirmation
    layers:
      - arn:aws:lambda:us-east-1:${file(../../commons/credentials.json):${self:provider.stage}.awsAccountId}:layer:rapidito_layer_v:${file(../../commons/credentials.json):${self:provider.stage}.layerVersion}


Resources:
  GatewayResponseDefault4XX:
    Type: 'AWS::ApiGateway::GatewayResponse'
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
      ResponseType: DEFAULT_4XX
      RestApiId:
        Ref: 'ApiGatewayRestApi'
  GatewayResponseDefault5XX:
    Type: 'AWS::ApiGateway::GatewayResponse'
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
      ResponseType: DEFAULT_5XX
      RestApiId:
        Ref: 'ApiGatewayRestApi'


